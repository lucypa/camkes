/*
 * Copyright 2020, Data61
 * Commonwealth Scientific and Industrial Research Organisation (CSIRO)
 * ABN 41 687 119 230.
 *
 * This software may be distributed and modified according to the terms of
 * the GNU General Public License version 2. Note that NO WARRANTY is provided.
 * See "LICENSE_GPLv2.txt" for details.
 *
 * @TAG(DATA61_GPL)
 */

import <std_connector.camkes>;
import <global-connectors.camkes>;
import <TimeServer/TimeServer.camkes>;
import <SerialServer/SerialServer.camkes>;

#include <plat/eth_devices.h>
#include <camkes-lwip-base.h>
#include <camkes-fdt-bind-driver.h>
#include <camkes-single-threaded.h>
#include <camkes-dynamic-untyped-allocators.h>
#include <camkes-x86-iospace-dma.h>
#include <camkes-SerialServer-camkes-putchar-client.h>
#include <camkes-BenchUtiliz.h>

#include <echo/tuning_params.h>

HARDWARE_ETHERNET_EXTRA_IMPORTS

component HWEthDriver82574 {
    hardware;
    emits IRQ irq;
    dataport Buf(0x20000) mmio;
};

component Ethdriver82574_1 {
    single_threaded_component()
    dynamic_untyped_allocators_interfaces(init_dynamic)
    x86_iospace_dma_interfaces(init_iospaces, "0x12:0x0:0x19:0")
    lwip_base_interfaces(lwip_base)
    SerialServer_putchar_printf_client(putchar)
    /*
     * The promiscuous mode is set according to whatever configuration you want, 1 by default.
     */
     attribute int promiscuous_mode = 1;

    consumes IRQ irq;
    dataport Buf(0x20000) EthDriver;
    dataport Buf cached_dma;

    uses IdleThread idle;


    /* MMIO and IRQ default values */
    attribute int mmio_paddr = 0xf7cc0000;
    attribute int mmio_size = 0x20000;
    attribute string irq_irq_type = "pci";
    attribute int irq_irq_ioapic = 0;
    attribute int irq_irq_ioapic_pin = 20;
    attribute int irq_irq_vector = 20;

    attribute int simple = 1;
    attribute int cnode_size_bits = 14;
    attribute int simple_untyped20_pool = 2;
    attribute int heap_size = HEAP_SIZE;

    attribute int dma_pool = DMA_ALLOC_SIZE;
    attribute int dma_pool_cached = 1;


    composition {
        component HWEthDriver82574 hwethdriver;
        connection seL4HardwareMMIO ethdrivermmio(from EthDriver, to hwethdriver.mmio);
        connection seL4GlobalAsynchHardwareInterrupt hwethirq(from hwethdriver.irq, to irq);
        dynamic_untyped_allocators_connections(init_dynamic)
        x86_iospace_dma_connections(init_iospaces)


    }
    configuration {
        hwethdriver.mmio_paddr <- mmio_paddr;
        hwethdriver.mmio_size <- mmio_size;
        hwethdriver.irq_irq_type <- irq_irq_type;
        hwethdriver.irq_irq_ioapic <- irq_irq_ioapic;
        hwethdriver.irq_irq_ioapic_pin <- irq_irq_ioapic_pin;
        hwethdriver.irq_irq_vector <- irq_irq_vector;
        dynamic_untyped_allocators_configuration(init_dynamic)
        x86_iospace_dma_configuration(init_iospaces)
   }
}

component FDT_device {
    hardware;
    emits FDT resource;
}

/* This is a macro used to define the hardware CAmkES component for each ARM platform */
HARDWARE_ETHERNET_COMPONENT

component EthdriverARMPlat_1 {
    single_threaded_component()

    lwip_base_interfaces(lwip_base)
    SerialServer_putchar_printf_client(putchar)
    BenchUtiliz_control_interfaces(idle)

    attribute int simple = true;
    attribute int cnode_size_bits = 12;
    attribute int simple_untyped20_pool = 2;
    attribute int promiscuous_mode = 1;
    attribute int heap_size = 0x10000;
    attribute int dma_pool = 0x20000;

	consumes FDT EthDriver;
	consumes FDT ocotp;
    consumes FDT iomux;
    consumes FDT ccm;
    consumes FDT analog;
    consumes FDT gpio1;
    dataport Buf cached_dma;
    fdt_bind_drivers_interfaces(["/ethernet@30be0000"]);

    composition {
		component FDT_device ether_qos;
		connection seL4DTBHWThreadless ethdriver_conn(from ether_qos.resource, to EthDriver);
        connection seL4DTBHWThreadless ocotp_conn(from ether_qos.resource, to ocotp);
        connection seL4DTBHWThreadless iomux_conn(from ether_qos.resource, to iomux);
        connection seL4DTBHWThreadless ccm_conn(from ether_qos.resource, to ccm);
        connection seL4DTBHWThreadless analog_conn(from ether_qos.resource, to analog);
        connection seL4DTBHWThreadless gpio1_conn(from ether_qos.resource, to gpio1);
		fdt_bind_driver_connections();
    }

    configuration {
        EthDriver.dtb = dtb({ "path" : "/ethernet@30be0000" });
        EthDriver.generate_interrupts = 1;
        ocotp.dtb = dtb({ "path" : "/ocotp-ctrl@30350000" });
        // iomux.dtb = dtb({ "path" : "/iomuxc@30330000" });
        iomux.dtb = dtb({ "path" : "/pinctrl@30330000" });
        // ccm.dtb = dtb({ "path" : "/ccm@30380000" });
        ccm.dtb = dtb({ "path" : "/clock-controller@30380000" });
        analog.dtb = dtb({ "path" : "/anatop@30360000" });
        gpio1.dtb = dtb({"path" : "/gpio@30200000"});
    }
};

component Dummy {
    dataport Buf dma;
}

assembly {
    composition {

#ifdef KernelArchArm
        component EthdriverARMPlat_1 ethdriver;
#endif
#ifdef KernelArchX86
        component Ethdriver82574_1 ethdriver;
#endif
        component Dummy dummy;

        component TimeServer time_server;
        component SerialServer serial_server;
        component BenchUtiliz bench;

        connection seL4TimeServer serialserver_timer (from serial_server.timeout, to time_server.the_timer);
        SerialServer_processed_putchar_printf_connection(putchar, ethdriver, serial_server)
        connection seL4DMASharedData dma_conn(from ethdriver.cached_dma, to dummy.dma);

        lwip_base_connections(ethdriver, lwip_base, time_server.the_timer)
        BenchUtiliz_trace_connections(trace, ethdriver, bench)
        BenchUtiliz_control_connections(idle, ethdriver, bench)
    }

    configuration {
        /*
         * Non-platform specific configurations
         */
        time_server.timers_per_client = 8;

        BenchUtiliz_trace_configurations(trace, ethdriver, 103)
        ethdriver.enable_tracing = 1;

        lwip_base_configuration(ethdriver, lwip_base, "", "0.0.0.0")
        //lwip_base_configuration(ethdriver, lwip_base, "10.0.2.15", "0.0.0.0")
        dma_conn.size = 0x800000;
        dma_conn.controller = "ethdriver.cached_dma";
    }
}

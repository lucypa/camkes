/*
 * Copyright 2020, Data61
 * Commonwealth Scientific and Industrial Research Organisation (CSIRO)
 * ABN 41 687 119 230.
 *
 * This software may be distributed and modified according to the terms of
 * the BSD 2-Clause license. Note that NO WARRANTY is provided.
 * See "LICENSE_BSD2.txt" for details.
 *
 * @TAG(DATA61_BSD)
 */

 import <std_connector.camkes>;
 import <global-connectors.camkes>;
 import <TimeServer/TimeServer.camkes>;
 import <SerialServer/SerialServer.camkes>;

 /* Import newer driver framework interfaces */
 #include <camkes-lwip-ethernet-async.h>
 #include <camkes-lwip-socket-sync.h>
 #include <camkes-lwip-base.h>
 #include <camkes-fdt-bind-driver.h>
 #include <camkes-single-threaded.h>
 #include <camkes-fdt-bind-driver.h>
 #include <camkes-SerialServer-camkes-putchar-client.h>

 #include <echo/tuning_params.h>

 component FDT_device {
	 hardware;
	 emits FDT resource;
 }

 component LWIPServer {
	 include "lwipserver.h";
	 single_threaded_component()
	 lwip_ethernet_async_client_interfaces(eth0)
	 lwip_socket_sync_server_interfaces(lwip)
	 lwip_base_interfaces(lwip_base)
	 SerialServer_putchar_printf_client(putchar)
	 composition {
		 lwip_socket_sync_server_connections(lwip)
	 }
	 configuration {
		 lwip_socket_sync_server_configurations(lwip)
	 }
 }

 component EthdriverARMPlatDF {
	 single_threaded_component()
	 lwip_ethernet_async_server_interfaces(eth0)
	 SerialServer_putchar_printf_client(putchar)

	 /*
	  * This attribute is set according to whatever configuration you want.
	  */
     attribute int simple = true;
     attribute int cnode_size_bits = 12;
     attribute int simple_untyped20_pool = 2;
	 attribute int promiscuous_mode = 1;
	 attribute int heap_size = 0x10000;
	 attribute int dma_pool = 0x200000;


	 consumes FDT EthDriver;
	 consumes FDT slcr;
	 fdt_bind_drivers_interfaces(["/amba/ethernet@e000b000"]);

	 composition {
		component FDT_device ether_qos;
		connection seL4DTBHWThreadless ethdriver_conn(from ether_qos.resource, to EthDriver);
		connection seL4DTBHWThreadless slcr_conn(from ether_qos.resource, to slcr);
		fdt_bind_driver_connections();
	 }

	 configuration {
    	EthDriver.dtb = dtb({ "path" : "/amba/ethernet@e000b000" });
    	EthDriver.generate_interrupts = 1;
    	slcr.dtb = dtb({ "path" : "/amba/slcr@f8000000" });
	 }
 };


 component Echo {
	 include "lwipserver.h";
	 single_threaded_component()

	 lwip_socket_sync_client_interfaces(echo)
	 SerialServer_putchar_printf_client(putchar)
 }

 assembly {
	 composition {
		 /* Echo component */
		 component Echo echo;

		 /* Lwipserver component */
		 component LWIPServer lwipserver;

		 /* Ethdriver component */
		 component EthdriverARMPlatDF ethdriver;

		 /* Timer component */
		 component TimeServer time_server;

		 component SerialServer serial_server;

		 /*
		  * Connections
		  */

		 /* Async 1:1 connection between ethernet and lwip components */
		 lwip_ethernet_async_connections(eth0, lwipserver, ethdriver)

		 /* echo client socket connection to lwip component */
		 lwip_socket_sync_client_connections(echo, echo, lwipserver, lwip)

		 /* lwip connection to time server */
		 lwip_base_connections(lwipserver, lwip_base, time_server.the_timer)

		 connection seL4TimeServer serialserver_timer (from serial_server.timeout, to time_server.the_timer);
		 SerialServer_processed_putchar_printf_connection(putchar, echo, serial_server)
		 SerialServer_processed_putchar_printf_connection(putchar, lwipserver, serial_server)
		 SerialServer_processed_putchar_printf_connection(putchar, ethdriver, serial_server)
	 }

	 configuration {
		 lwip_ethernet_async_configurations(eth0, lwipserver, ethdriver)
		 /* Setting buffer size of echo socket to 4096 */
		 lwip_socket_sync_client_configurations(echo, echo, 0x1000, LWIP_SOCKET_ASYNC_QUEUE_LEN, LWIP_SOCKET_ASYNC_POOL_SIZE)
		 lwip_socket_msgqueue_configurations(echo, echo, lwipserver, lwip)

		 /* timeserver requires some value for this setting. Currently only lwip
			uses 1 timer */
		 time_server.timers_per_client = 8;


		 /*
		  * Lwipserver config
		  */
		 /* IP address to assign to the networking device */
		 lwip_base_configuration(lwipserver, lwip_base, "", "0.0.0.0")

		 /* Heap used by lwip for tracking clients, sockets and lwip backing queues. */
		 lwipserver.heap_size = 0x40000;

	 }
 }
